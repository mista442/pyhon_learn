# В Python, переменные не хранят значения, а выступают в роли ссылок на объекты. То есть когда вы присваивайте значение новой переменной,
# то сначала создается объект с этим значением, а уже потом переменная начинает ссылаться на него.
# На один объект может ссылаться множество переменных. (https://habr.com/ru/articles/417215/)

# при работе с переменными, операция присваивания может осуществляться по значению переменной
# или по ссылке. То есть при работе с переменными - у нее есть 2 параметра, которые ее идентифицируют:
# 1) адрес в памяти 2) значение, которое хранится в этом адресе памяти.

a=5
print("a =",a)
print("id(a) ",id(a)) #отобразить идентификатор ячейки в памяти RAM, куда сохранена переменная 'a'.

b=a #выполнили операцию пресваивания. cоздана ссылка на один и тот же обьект.
# переменные a и b будут указывать на один и тот же участок памяти. В данном # случае операция присвания будет
# осуществляться по ссылке.
print("b = a; b =",b)
print("id(b) ",id(b),', "присвоили переменной b информацию по ссылке, т.к. id для a и b одинаковый"')

print()

a=13 #при измении данных в переменной 'a' - для этой переменной будет выделяться новый участок памяти (новый id) и туда
# будет записываться информация. А старый участок памяти переменной 'a' уже не используется. Он висит без дела.
# при этом переменная 'b' будет ссылаться на старую ячейку переменной 'a' (на старую ссылку).
# через какое-то время старая ячейка памяти будет удалена сборщиком мусора если она ни где не будет использоваться (если
# переменной a снова не вернуть изначальное значение)

print("a =",a, ", id(a) after change a -",id(a))

print("b =",b, ",  id(b) after change a -",id(b))
#print("id(b) after change a ",id(b))

#----------------------------------------------------------------------------------------------------------------
