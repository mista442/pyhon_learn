# list (список) - структура хранения данных, позволяющая хранить разные типы данных.
# Список состоит из элементов. Каждый элемент списка может быть разного типа (int,float,str,list ...)

# списки относятся к изменяемым типам данных. Данная структура является динамической.
# при попытках вывести несуществующий номер элемента в списке - будет получена ошибка (IndexError: list index out of range)

# test = [1, 'hello', 3.5, -18]
# print(test)
# print(type(test)) # тип list
#
# # вывести 2 элемент списка
# print(test[2])
#
# #----------------- методы apend и insert для работы с элементами списка ---------#
#
# # добавить в конец списка новый элемент (метод append)
# test.append(99) #после применения метода, в перенеменую добавятся новые данные
# print(test)
# print(test[4])
# #[1, 'hello', 3.5, -18, 99]
# #99
#
#
# # добавить новый элемент в указаный индекс списка (метод insert)
# test.insert(2,"world") # добавить элемент типа str со значением "world" вторым по счету индексом.
# print(test)
# #[1, 'hello', 'world', 3.5, -18, 99]
#
# # P.S. элемент с одним и тем же значением можно добавлять несколько раз и любые места в списке, например:
# test.append("cisco")
# test.insert(3,"cisco")
# print(test)
# #[1, 'hello', 'world', 'cisco', 3.5, -18, 99, 'cisco']
#
# # узнать номер индекса элемента 'world'
# print(test.index("world"))
#
# # если в списке есть несколько элементов с одним и тем же значением, при поиске номера индекса элемента - отобразится
# # только самый первый номер индекса повторяющего элемента
# print(test.index("cisco"))
#                          #3                       #7
# # #[1, 'hello', 'world', 'cisco', 3.5, -18, 99, 'cisco']
#
# # remove удаляет один элемент до первого попавшего совпадения - слева направо.
# test.remove("cisco")
# print(test)
#
# #[1, 'hello', 'world', 3.5, -18, 99, 'cisco']
#
# # pop - удалить один элемент по номеру индекса
# test.pop(6)
# print(test)
# #[1, 'hello', 'world', 3.5, -18, 99]
#
# # если номер индекса не указывать, то по умолчанию будет удален последний элемент по номеру индекса
# test.pop()
# print(test)
#
# print(test[1]) #отобразить элемент списка по номеру индекса - hello
# print(test[-3]) #отобразить элемент списка по номеру индекса - world
# print(test[1:3]) #выполнить срез элементов - ['hello','world']

#------------------- изменение данных внутри листа -------------#

# a=45
# a[0]=3
# print(a) #TypeError: 'str' object does not support item assignment - типы данных int,str,float,complex,frozen set
# относятся к неизменяемым типам данных (immutable) и поменять значение внутри переменной нельзя.

# но данные внутри листа поменять можно, т.к. это изменяемый тип данных (mutable)

#  0    1      2        #индексы элементов
a=[45, 2.1, 'hello']

#перезаписываем значение индекса элемента на новое
a[0]=35
print(a)

#------------------- лист в внутри листа ---------------------#

#        0     1       2     3          4
test = [321, 'hello', 3.5, -18, [99, 'world', -15]]
print(test)
print(type(test))
test[4][2]=-45 #переходим в 4 индекс элемента всего списка. 4 индекс это вложенный список. Далее у 2 подиндекса
# меняем значение -15 на -45

# [321, 'hello', 3.5, -18, [99, 'world', -45]]
print(test)

#---------------- добавление элемента в конец подсписка (append) ------------#

#  0   1     2        3          4
b=[15, 28, 'world', 'tank',[8, 'test', -3.5]]

# переходим в 4 индекс, и добавляем новый элемент в подсписок со значением 99
b[4].append(99)
print(b)

# --------------- добавление элемента в указаный индекс подсписка (insert) ---------------- #

# переходим в 4 индекс (это подиндекс), далее через метод insert в 1-ом подиндексе создаем элемент со значением 'world'
b[4].insert(1,'world')
print(b)

# --------------- удаление элемента подсписка по номеру индекса (pop) ---------------- #

#удалить 0 индекс в посдписке (удалить элемент со значением 8)
b[4].pop(0)
print(b)