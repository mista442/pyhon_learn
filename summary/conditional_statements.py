# лекция 1.6 - контроль хода программы (if/elif/else; for/while,beak,continue; )

'''
Ветвление. Условный оператор

Конструкция if/elif/else позволяет делать ответвления в ходе программы. Программа уходит в ветку при выполнении определенного условия.
В этой конструкции только if является обязательным, elif и else опциональны:
Проверка if всегда идет первой.
После оператора if должно быть какое-то условие: если это условие выполняется (возвращает True), то действия в блоке if выполняются.
С помощью elif можно сделать несколько разветвлений, то есть, проверять входящие данные на разные условия.
Блок elif это тот же if, но только следующая проверка. Грубо говоря, это «а если …»
Блоков elif может быть много.
Блок else выполняется в том случае, если ни одно из условий if или elif не было истинным.

Если логическое выражение возвращает истину, то выполняются выражения внутри фигурных скобок;
Если логическое выражение возвращает ложь, то код внутри фигурных скобок не выполняется.
'''


b = True
a = 10
if a > 15:
    print(b) # логическое выражение не возвращает истину, поэтому оно не выплолнится и ничего в выведется
else:
    print("not true") # после if еще написан блок else. Если if не выполнен, то выполняется блок else

#-----------------------------------

a1 = 20
if a1 == 15: # логическое выражение не истинно, поэтому данный блок if выполнен не будет и функция print не отработает
    print("the first if is", b)
elif a1 > 15: # логическое выражение истинно, блок отработает и программа завершится в данном случае.
    print("the second if is", b)
else:
    print("not true2")

'''
Для реализации выбора из нескольких альтернатив можно использовать конструкцию if – elif – else.

if выражение_1:
    инструкции_(блок_1)
elif выражение_2:
    инструкции_(блок_2)
elif выражение_3:
    инструкции_(блок_3)
else:
    инструкции_(блок_4)
'''

# Пример использования конструкции if – elif – else

a = int(input("введите число:"))
if a < 0:
   print("Neg")
elif a == 0:
   print("Zero")
else:
   print("Pos")

'''
цикл никогда не завершится, если только в его теле нет оператора принудительного выхода из цикла (break) или 
вызовов функций выхода из программы – quit() в случае Python. 
'''

# принудительный выход из программы - quit(). Функция exit() работает визульно аналогично

ip = str(input("введите ip адрес "))
ip = ip.split('.') # строку переделываем в список, в качестве разделителя элементов указываем точку.

check_ip = []
if len(ip) != 4: # если длина ip адреса не равна 4, то выходим
    quit("Неправильный IP-адрес")

#----------- continue

some = 0 # Изначально ноль
while some < 10: # Работает пока меньше 10
  some += 1 # В каждой итерации увеличиваем на 1
  if some % 2 == 0: # Если четное, то пропускаем число
    continue # Пропуск итерации
  print("Значение равно: ", some)

'''
Значение равно:  1
Значение равно:  3
Значение равно:  5
Значение равно:  7
Значение равно:  9
'''
#-------- finally - выполняется в любом случае, даже если есть аварийная ошибка в программе

try:
    n = input('Введите целое число: ')
    n = int(n)
except ValueError:
    print("Неверный ввод")
else: # когда в блоке try не возникло исключения
    print("Все нормально. Вы ввели число", n)
finally: # выполняется в любом случае
    print("Конец программы")