# 2.9 лекция - функкции. 26.11.2023

#  ______               ____________
# |      | ----------> |            |
# |      |             | Function 1 |
# |      | <---------- |            |
# |      | send result --------------
# | MAIN |
# |      |              ____________
# |      | -------->   |            |
# |      |             | Function 2 |
# |      | <--------   |            |
# |      | send result  -------------
# |      |
# |      | send agrs
# |      | (optional)    ___________
# |      | ----------> |            |
# |      |             | Function 3 |
# |      | <---------- |            |
# |______| send result  ------------

'''MAIN - это основная программа, которая вызывает функции 1,2,3 во время выполнения.
Функции помогают сократить количество кода. Чтобы не писать один и тот же код множество раз,
а вызвать функцию в которой уже написан нужный и код, и потом только вызывать эту функцию в нужных местах программы.
Функции можно в дальнейшем использовать и в других программах (в других main'ах)

Для передачи функции другим программистам - функцию можно опубликовать в модуль, чтобы ей могли пользоваться другие программисты в своих программах.
'''

# синтаксис функции:

# def <имя функции>(<args>):
#       <body def>
# <имя функции>() - вызов функции

# args - это параметры, которые передает основная программа функции в качестве аргументов (опционально)
# body def - код, который будет выполняться внутри тела функции
# <имя функции>() - вызов функции для выполнения и передачи результата основной программе

# Основная программа ничего не знает про то что происходит внутри тела функции.
# Поэтому основная программа может только вызвать функцию и получить от нее результат и дальше его как-то обрабатывать.
# есть еще варианты как вернуть данные из функции для основной программы, но про это чуть ниже

# Когда функция создана, она ещё ничего не выполняет. Только при
# вызове функции действия, которые в ней перечислены, будут
# выполняться.

#-------------------------

# в данном примере функция не вызывается, поэтому выполнена не будет

# def test():
#     print('hello')

# этом примере она вызывается - test()

# test() # после вызова функции test - будет выполнено тело функции - print('hello')

#-------------------------

# программа подсчета суммы 2 чисел

# a = int(input("введите первое число "))
# b = int(input("введите второе число "))
#
# summa = a + b
#
# print("сумма двух чисел =", summa)

# реализуем данную программу в виде нескольких функций

# func1 - ввод информации
# func2 - анализ информации
# func3 - вывод результата анализа информации

# func1
# def InputData():
#     a = int(input("введите первое число "))
#     b = int(input("введите второе число "))
#
# # вызываем функцию InputData
# InputData()
#
# def SumData():

#--------------------------------------------------
# cпособы как подпрограмма передавать данные из тела функции для основной программы:

# - использование глобальных переменных
# - использование return
# - использование файлов
# - передача аргументов по ссылке

# ---

# Глобальные переменные - те что определены вне тела функции.
# Локальные - те что определены внутри тела функции

# a=0 # global
# b=0 # global
#
# def InputData1():
#     a = int(input("введите первое число ")) # local
#     b = int(input("введите второе число ")) # local

# но функции можно явно указать что она использовала глобальные переменные:

a=0 # global
b=0 # global
c=0

def InputData1():
    global a,b
    a = int(input("введите первое число ")) # теперь global - берутся из основной программы
    b = int(input("введите второе число ")) # теперь global - берутся из основной программы

InputData1() # вызвали функцию и ввели значения в глобальные переменные a и b

#print("сумма сложения глобальных переменных a и b =",a+b) # отобразить сумму глобальных переменных a и b

def SumData():
    global c
    c=a+b

def PrintResult():
    print("сумма сложения глобальных переменных a и b =",c)

SumData() # вызываем функцию сложения глобальных переменных a и b
PrintResult() # вызываем функцию вывода результата сложения глобальных переменных a и b

# НО использование глобальных переменных крайне не рекомендуется, т.к. при изменении локальных переменных на глобальные
# все функции ниже при указании тех же переменных смогут использовать теже самые переменные. Это может быть не безопасно
# т.к. другой программист может изменить эту функцию на свое усмотрение и в итоге программа будет работать не так как ожидалось

